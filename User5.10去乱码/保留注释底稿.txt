2020年5月10日11:12:32
原编码gb2312
speed.h.c
direction.h.c
param.h.c
/*-------------------------------------------------------------------------------------------------------*/
direction.h  

#ifndef _DIRECTION_H
#define _DIRECTION_H

void Read_ADC(void);
void DirectionPID_Init(void);
void CalDirectionPID(void);
void DirectionPartitionPwmOut(void);
void CalDirectionError(void);

//pid初始化结构体
typedef struct
{
  
  float curr;  //当前值
  float set;   //设定值
  float En;   //偏差
  float En_1; //前一次偏差
  float En_2; //前两次偏差
  
  float Kp;   //展开式中的系数kp，不是最终的Kp
  float Tsam; //采样周期---控制周期，每隔Tsam控制器输出一次PID运算结果
  float Ti;   //展开式中的系数TI
  float Td;   //展开式中的系数Td
  
  float Dout;//增量PID计算本次应该输出的增量值--本次计算的结果
  
  u16 calc_cycle; //计算周期，用不到
  short currpwm;  //当前的pwm
  u16 pwm_cycle;  //pwm宽度

}directionPID;

extern directionPID  d_pid;   

#endif

direction.c

#include "include.h"
#include "LQ_ADC.h"
#include "Direction.h"

/**********全局变量********/
directionPID  d_pid;
float DirectionErr[3];	//三对速度偏差
int16 sensor[6]={0};       //六个电感值滤波后
float ad_value_min = 200;  //电感值min
float ad_value_max = 1000;  //电感值max
float oriDirectionPwm[3] ;//原始方向pwm，可以加算法
float DirectionPwm;      //最终pwm

/*------------------------------------------------------------------------------------------------------
 * Name         : DirectionPID_Init
 * Function     : 方向pid初始化
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 
--------------------------------------------------------------------------------------------------------*/
void DirectionPID_Init()  
{
  //d_pid.set =0;
  d_pid.currpwm=0;
  d_pid.pwm_cycle=100;    
  d_pid.calc_cycle=100;  
  d_pid.Td=2000;
  //d_pid.Ti=4000;
  d_pid.Kp=5;
  d_pid.Tsam=5;//5ms一次方向pid
  d_pid.En=0;
  d_pid.En_1=0;
  d_pid.En_2=0;

}

/*------------------------------------------------------------------------------------------------------
 * Name         : CalDirectionPID
 * Function     : 计算方向pid
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 
--------------------------------------------------------------------------------------------------------*/
void CalDirectionPID(void)
{

  float dk1;float dk2;
  float t1,t2,t3;
  short i; 

  for (i = 0; i < 2; i++)
  {
    CalDirectionError();

      d_pid.En = DirectionErr[i];
      dk1=d_pid.En-d_pid.En_1;   
      dk2=d_pid.En-2*d_pid.En_1+d_pid.En_2;

    t1=d_pid.Kp*dk1;
        
        t2=(d_pid.Kp*d_pid.Tsam)/d_pid.Ti;    
    t2=t2*d_pid.En;
    t2=0;//调试时设为0
        
        t3=(d_pid.Kp*d_pid.Td)/d_pid.Tsam;
    t3=t3*dk2;
    t3=0;//调试时设为0
        
    d_pid.Dout=t1+t2+t3;  ////此次输出的pwm
    d_pid.currpwm+=d_pid.Dout;  //当前需要输出的pwm，增量式
    if(d_pid.currpwm>d_pid.pwm_cycle) {d_pid.currpwm=d_pid.pwm_cycle;}//限幅
    if(d_pid.currpwm<0) {d_pid.currpwm=0;}

    oriDirectionPwm[i]=d_pid.currpwm;
    d_pid.En_2=d_pid.En_1;
    d_pid.En_1=d_pid.En;
  } 
}

/*------------------------------------------------------------------------------------------------------
 * Name         : DirectionPartitionPwmOut
 * Function     : 方向分区pid输出
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 这里实现各种特殊位置识别算法，环岛等
--------------------------------------------------------------------------------------------------------*/
void DirectionPartitionPwmOut()
{       
  CalDirectionPID();
  //调试
  if (/*flagRound = 1*/ 1)  
  { 
    /*自定义*/
    DirectionPwm = oriDirectionPwm[0];
  }
  else if(1)//两对水平电感加权
  {
    DirectionPwm = oriDirectionPwm[1]*30+oriDirectionPwm[2]*70; 
  }
}

/*------------------------------------------------------------------------------------------------------
 * Name         : CalDirectionError
 * Function     : 计算方向pid偏差
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 
--------------------------------------------------------------------------------------------------------*/
void CalDirectionError()
{
  Read_ADC();

  //竖直电感2	
	DirectionErr[0] = (float)(sensor[0]-sensor[5])/(sensor[0]+sensor[5]);//差比和
	DirectionErr[0] = (DirectionErr[0]>= 1? 1:DirectionErr[0]);       //限幅	
	DirectionErr[0] = (DirectionErr[0]<=-1?-1:DirectionErr[0]);
	//水平电感2		
	DirectionErr[1] = (float)(sensor[1]-sensor[4])/(sensor[1]+sensor[4]);
	DirectionErr[1] = (DirectionErr[1]>= 1? 1:DirectionErr[1]);	
	DirectionErr[1] = (DirectionErr[1]<=-1?-1:DirectionErr[1]);	
	//水平电感1	
	DirectionErr[2] = (float)(sensor[2]-sensor[3])/(sensor[2]+sensor[3]);
	DirectionErr[2] = (DirectionErr[2]>= 1? 1:DirectionErr[2]);	
	DirectionErr[2] = (DirectionErr[2]<=-1?-1:DirectionErr[2]);	

}


/*------------------------------------------------------------------------------------------------------
 * Name         : Read_ADC
 * Function     : 读取电感值
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 滑动平均滤波+归一化
--------------------------------------------------------------------------------------------------------*/    
void Read_ADC() 
{
  int16_t i,j,k,temp;
  int16_t ad_value[5][5],ad_valueF[5],ad_sum[5];
  float ad_value_one[5];
//     int16_t ad_value_old[5],ad_value_new[5];  

  //二维数组初始化
  for(i=0;i<5;i++)
  {
    for(int j = 0; j < 5; j++)
    {
      ad_value[i][j]=0;
    }
  }
  i=0;j=0;
  
  for(i=0;i<5;i++)
  {   
      ad_value[0][i]=ADC_Get(0);  // 从左到右0~5
      ad_value[1][i]=ADC_Get(1);  //           
      ad_value[2][i]=ADC_Get(2);  // 
      ad_value[3][i]=ADC_Get(3);  //          
      ad_value[4][i]=ADC_Get(4);  // 
      ad_value[5][i]=ADC_Get(5);  // 
  }  

/*=========================冒泡降序排列==========================*/
  for(i=0;i<5;i++)
  {
    for(j=0;j<4;j++)
    {
      for(k=0;k<4-j;k++)  
      {
        if(ad_value[i][k]>ad_value[i][k+1]) 
        {
          temp=ad_value[i][k+1];
          ad_value[i][k+1]=ad_value[i][k];
          ad_value[i][k]= temp;
        }
      }
    }
  }
/*===========================滑动平均滤波=================================*/
  for(i=0;i<5;i++)    
  {
    ad_sum[i] =ad_value[i][1]+ad_value[i][2]+ad_value[i][3];  //取中间三位
    ad_valueF[i]=ad_sum[i]/3;  
    //归一化
    ad_value_one[i]=(ad_valueF[i]-ad_value_min)/(ad_value_max-ad_value_min);
    ad_value_one[i]=(ad_valueF[i] < 0 ? 0 : ad_valueF[i]);
    ad_value_one[i]=(ad_valueF[i] > 1 ? 1 : ad_valueF[i]);
  }	
  for(i=0;i<5;i++)  //乘100
  {
    sensor[i] = (int16_t)(ad_value_one[i]*100);//sensor[i] (0,100)
  }       

}
	 

speed.h

#ifndef _SPEED_H
#define _SPEED_H

extern float DirectionPwm;

void PWMOut(void);
void CalSpeedError(void);
void SpeeedPID_Init(void);
void CalSpeedPID(void);
void SpeedPartitionPwmOut(void);

//pid初始化结构体
typedef struct
{
  float curr;  //当前值
  float set;   //设定值

  float En;   //偏差
  float En_1; //前一次偏差
  float En_2; //前两次偏差
  
  float Kp;   //展开式中的系数kp，不是最终的Kp
  float Tsam; //采样周期---控制周期，每隔Tsam控制器输出一次PID运算结果
  float Ti;   //展开式中的系数TI
  float Td;   //展开式中的系数Td
  
  float Dout;//增量PID计算本次应该输出的增量值--本次计算的结果
  
  u16 calc_cycle; //计算周期，用不到
  short currpwm;  //当前的pwm
  u16 pwm_cycle;  //pwm宽度

}speedPID;

extern speedPID  s_pid;

#endif

speed.c

#include "include.h"
#include "LQ_MOTOR.h"
#include "Speed.h"
#include "Param.h"
/**********全局变量********/
int32 LeftDead = 0;  //电机死区，一般为 10-15%
int32 RighDead = 0;  //
int32 g_nLeftpulse = 0, g_nRighpulse = 0;
//以下舍弃计算速度，用pwm估计速度
//float Ratio_Encoder_Left = 207/(512*0.02);// 左轮速度=counter*左轮周长(mm)/(左轮转一圈对应的脉冲数*程序周期) 
//float Ratio_Encoder_Righ = 207/(512*0.02);// 右轮速度=counter*右轮周长(mm)/(右轮转一圈对应的脉冲数*程序周期)
float g_fRealSpeed = 0;		//真实速度，未滤波
float g_fLeftRealSpeed;
float g_fRighRealSpeed;
float g_fSpeedFilter = 0;		//真实速度，左右速度平均滤波，限幅滤波

float g_fExpectSpeed = 500;		//期望pwm值（待定）max==1000
float g_fSpeedError;			//速度偏差

int32 LeftPWM=0, RightPWM=0;  //
int32 LeftPWM_F= 0, RighPWM_F= 0;  //左右pwm

float bangbangValue = 500;            //棒棒算法值
float oriSpeedPwm;     //原始pwm，可叠加各种算法
float SpeedPwm = 0;    //最终输出的pwm
speedPID  s_pid;

extern Param param;

float g_PWMOut;

/*------------------------------------------------------------------------------------------------------
 * Name         : PWMOut
 * Function     : 输出pwm
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 
--------------------------------------------------------------------------------------------------------*/
void PWMOut(void)
{      
    //起始的pwm设置为300
	DirectionPwm = 0;//调试速度pid，把DirectionPwm设为0

	LeftPWM = (int32)(300-DirectionPwm+SpeedPwm);  //
	RightPWM = (int32)(300+DirectionPwm+SpeedPwm); 
        
	abs(LeftPWM);//pwm取正
	LeftPWM_F = LeftDead + LeftPWM;
	LeftPWM_F = (LeftPWM_F > 950? 950: LeftPWM_F);//限幅
	FTM_PwmDuty(FTM0, FTM_CH4, 0);
	FTM_PwmDuty(FTM0, FTM_CH5, LeftPWM_F);
		
	abs(RightPWM);
	RighPWM_F = RighDead + RightPWM;
	RighPWM_F = (RighPWM_F > 950? 950: RighPWM_F);
	FTM_PwmDuty(FTM0, FTM_CH6, 0);
	FTM_PwmDuty(FTM0, FTM_CH7, RighPWM_F);
	
	param.LeftPWM_F = LeftPWM_F;//传递参数，给示波器
	param.RighPWM_F = RighPWM_F;
}


/*------------------------------------------------------------------------------------------------------
 * Name         : CalSpeedError
 * Function     : 计算速度偏差
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 
--------------------------------------------------------------------------------------------------------*/
void CalSpeedError(void)
{
	static float fSpeedOld = 0;//用于速度偏差计算
	static float fSpeedNew = 0;
        
	g_nLeftpulse = FTM_ABGet(FTM1);
	g_nRighpulse = FTM_ABGet(FTM2);
	//不进行速度换算
	g_fLeftRealSpeed = g_nLeftpulse;
	g_fLeftRealSpeed = (g_fLeftRealSpeed>2000?2000:g_fLeftRealSpeed);		//限幅
	g_fRighRealSpeed = g_nRighpulse;
	g_fRighRealSpeed = (g_fRighRealSpeed>2000?2000:g_fRighRealSpeed);		//限幅
	    
	g_fRealSpeed = (g_fLeftRealSpeed + g_fRighRealSpeed)*0.5;	

	fSpeedOld = g_fSpeedFilter;
	fSpeedNew = g_fRealSpeed;
	//速度偏差限幅
	if(fSpeedNew>=fSpeedOld)
		g_fSpeedFilter = ((fSpeedNew-fSpeedOld)>300?(fSpeedOld+300):fSpeedNew);
	else
		g_fSpeedFilter = ((fSpeedNew-fSpeedOld)<-300?(fSpeedOld-300):fSpeedNew);
	
        param.g_fSpeedFilter = g_fSpeedFilter;//传递参数，给示波器      
	
	g_fSpeedError =  g_fExpectSpeed - g_fSpeedFilter;
}

/*------------------------------------------------------------------------------------------------------
 * Name         : SpeeedPID_Init
 * Function     : 速度pid初始化
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 
--------------------------------------------------------------------------------------------------------*/
void SpeeedPID_Init()  
{
	
	s_pid.set =g_fExpectSpeed;
	s_pid.currpwm=0;
	s_pid.pwm_cycle=1000;  //输出的pwm最大值，限幅作用 
	s_pid.calc_cycle=20;  //pid计算周期，20ms用pit中断，这里没用
	s_pid.Td=0;
	s_pid.Ti=4000;
	s_pid.Kp=50;
	s_pid.Tsam=20;//pid计算周期，20ms用pit中断
	s_pid.En=0;
	s_pid.En_1=0;
	s_pid.En_2=0;
	
	param.g_fExpectSpeed = g_fExpectSpeed;

}

/*------------------------------------------------------------------------------------------------------
 * Name         : CalSpeedPID
 * Function     : 计算速度pid
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 增量式
--------------------------------------------------------------------------------------------------------*/
void CalSpeedPID(void)
{
  float dk1;float dk2;
  float t1,t2,t3;
	
    CalSpeedError();
          
		s_pid.En = g_fSpeedError;
		dk1=s_pid.En-s_pid.En_1;   
		dk2=s_pid.En-2*s_pid.En_1+s_pid.En_2;
	
    t1=s_pid.Kp*dk1;//Kp，第一项
	
		t2=(s_pid.Kp*s_pid.Tsam)/s_pid.Ti;
		
	t2=t2*s_pid.En;//Ki，第二项
	t2= 0;//调试时设为0
	
		t3=(s_pid.Kp*s_pid.Td)/s_pid.Tsam;
	
	t3=t3*dk2;//Kd，第三项
	t3= 0;//调试时设为0
	
    s_pid.Dout=t1+t2+t3;  //此次输出的pwm
	s_pid.currpwm+=s_pid.Dout;  //当前需要输出的pwm，增量式

	if(s_pid.currpwm>s_pid.pwm_cycle) {s_pid.currpwm=s_pid.pwm_cycle;}//限幅
	if(s_pid.currpwm<0) {s_pid.currpwm=0;}
	
	s_pid.En_2=s_pid.En_1;
	s_pid.En_1=s_pid.En;
	oriSpeedPwm=s_pid.currpwm;
}


/*------------------------------------------------------------------------------------------------------
 * Name         : SpeedPartitionPwmOut
 * Function     : 速度分区pwm输出
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 这里实现各种算法，如棒棒算法
--------------------------------------------------------------------------------------------------------*/
void SpeedPartitionPwmOut()
{	
	CalSpeedPID();
	//棒棒算法，调试时曲线
	/*
	if (oriSpeedPwm < bangbangValue)
	{	
		SpeedPwm = 1000 ;//给满占空比
	}
	*/
	SpeedPwm = oriSpeedPwm;
        
    param.SpeedPwm = SpeedPwm;//传递参数，给示波器
}

param.h
#ifndef PARAM_H
#define PARAM_H

#include "Speed.h"
#include "Direction.h"
#include "ANO_DT.h"

void ParamOut(void);

//示波器结构体
typedef struct
{       
    int32 LeftPWM_F;
    int32 RighPWM_F;
    
    float g_fSpeedFilter; //real speed + filter
    float g_fExpectSpeed; //
    
    float SpeedPwm;  
  
}Param;

extern Param param;

void Scope(void);

#endif

param.c

#include "include.h"
#include "Param.h"


Param param;

/*------------------------------------------------------------------------------------------------------
 * Name         : Scope
 * Function     : 示波器
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 示波器结构体
--------------------------------------------------------------------------------------------------------*/
void Scope()
{

    ANO_DT_send_int16((short)param.g_fExpectSpeed,
                      (short)param.RighPWM_F,
                      (short)param.SpeedPwm,
                      (short)param.g_fSpeedFilter,
                      0,
                      0,
                      0,
                      0);

}

/*------------------------------------------------------------------------------------------------------
 * Name         : ParamOut
 * Function     : pid输出
 * Author       : Vincent.Liang
 * Date         : 2020/5/9
 * Notes        : 
--------------------------------------------------------------------------------------------------------*/
void ParamOut()
{
  char txt[16];
      
  while(1)
      { 
          printf("\r\n/ExSp %5d \r\n ",(int32)param.g_fExpectSpeed);
          sprintf(txt," ExSp:%5d\r\n",(int32)param.g_fExpectSpeed);
          OLED_P8x16Str(0,0,(uint8_t*)txt);
          /*
          printf("\r\n/Lpwm %5d \r\n ",param.LeftPWM_F);
          sprintf(txt," Lpwm:%5d\r\n",param.LeftPWM_F);
          OLED_P8x16Str(0,0,(uint8_t*)txt);
          */
          printf("\r\n/Rpwm %5d \r\n ",param.RighPWM_F);
          sprintf(txt," Rpwm:%5d\r\n",param.RighPWM_F);
          OLED_P8x16Str(0,2,(uint8_t*)txt);
          
         printf("\r\n/SpPwm %5d \r\n ",(int32)param.SpeedPwm);
          sprintf(txt," SpPwm:%5d\r\n",(int32)param.SpeedPwm);
          OLED_P8x16Str(0,4,(uint8_t*)txt);
          
          printf("\r\n/Speed %5d \r\n ",(int32)param.g_fSpeedFilter);
          sprintf(txt," Speed:%5d\r\n",(int32)param.g_fSpeedFilter);
          OLED_P8x16Str(0,6,(uint8_t*)txt);
      }
}